console.log("üîç DEBUG COMPLETO - REATIVA√á√ÉO")
console.log("=".repeat(60))

// 1. Verificar dados atuais
const dados = localStorage.getItem("agendamentos")
console.log("üìä localStorage 'agendamentos' existe:", !!dados)

if (dados) {
  const agendamentos = JSON.parse(dados)
  console.log("üìä Total de agendamentos:", agendamentos.length)

  agendamentos.forEach((ag, index) => {
    console.log(`${index + 1}. ID: ${ag.id}`)
    console.log(`   Status: ${ag.status}`)
    console.log(`   Aluno: ${ag.alunoNome || ag.alunoId}`)
    console.log(`   Data: ${ag.data}`)
    console.log("   ---")
  })

  // Encontrar recusados
  const recusados = agendamentos.filter((ag) => ag.status === "recusado")
  console.log("\nüî¥ AGENDAMENTOS RECUSADOS:", recusados.length)

  if (recusados.length > 0) {
    console.log("üìã Detalhes dos recusados:")
    recusados.forEach((ag, index) => {
      console.log(`  ${index + 1}. ID: ${ag.id} | Motivo: ${ag.motivoRecusa || "N√£o informado"}`)
    })

    // Testar reativa√ß√£o no primeiro recusado
    const primeiro = recusados[0]
    console.log(`\nüéØ TESTANDO REATIVA√á√ÉO: ${primeiro.id}`)

    // Fun√ß√£o de teste super simples
    function testarReativacao(agendamentoId) {
      console.log(`\nüîÑ INICIANDO TESTE: ${agendamentoId}`)

      try {
        // Passo 1: Carregar dados
        const dadosAtuais = JSON.parse(localStorage.getItem("agendamentos") || "[]")
        console.log("‚úÖ Dados carregados:", dadosAtuais.length)

        // Passo 2: Encontrar agendamento
        const index = dadosAtuais.findIndex((ag) => ag.id === agendamentoId)
        console.log("‚úÖ √çndice encontrado:", index)

        if (index === -1) {
          console.error("‚ùå Agendamento n√£o encontrado!")
          return false
        }

        // Passo 3: Mostrar status atual
        console.log("üìã Status ANTES:", dadosAtuais[index].status)

        // Passo 4: Alterar status
        dadosAtuais[index].status = "pendente"
        dadosAtuais[index].motivoRecusa = undefined

        console.log("üìã Status DEPOIS:", dadosAtuais[index].status)

        // Passo 5: Salvar
        localStorage.setItem("agendamentos", JSON.stringify(dadosAtuais))
        console.log("üíæ Dados salvos")

        // Passo 6: Verificar se salvou
        const verificacao = JSON.parse(localStorage.getItem("agendamentos") || "[]")
        const agVerificado = verificacao.find((ag) => ag.id === agendamentoId)

        console.log("üîç VERIFICA√á√ÉO:")
        console.log("   Status salvo:", agVerificado?.status)
        console.log("   Motivo removido:", agVerificado?.motivoRecusa === undefined)

        if (agVerificado?.status === "pendente") {
          console.log("üéâ SUCESSO! Reativa√ß√£o funcionou!")

          // Disparar evento
          window.dispatchEvent(new CustomEvent("agendamentosCriados"))
          console.log("üì° Evento disparado")

          return true
        } else {
          console.error("‚ùå FALHA! Status n√£o foi alterado")
          return false
        }
      } catch (error) {
        console.error("üí• ERRO:", error)
        return false
      }
    }

    // Executar teste
    const resultado = testarReativacao(primeiro.id)

    if (resultado) {
      console.log("\n‚úÖ TESTE PASSOU! A fun√ß√£o funciona!")

      // Mostrar estat√≠sticas atualizadas
      const dadosFinais = JSON.parse(localStorage.getItem("agendamentos") || "[]")
      const novosRecusados = dadosFinais.filter((ag) => ag.status === "recusado")
      const novosPendentes = dadosFinais.filter((ag) => ag.status === "pendente")

      console.log("\nüìä ESTAT√çSTICAS ATUALIZADAS:")
      console.log(`   Recusados: ${novosRecusados.length}`)
      console.log(`   Pendentes: ${novosPendentes.length}`)
    } else {
      console.log("\n‚ùå TESTE FALHOU! H√° um problema na fun√ß√£o")
    }

    // Disponibilizar fun√ß√£o globalmente
    window.reativarTeste = testarReativacao
    console.log("\nüìù Fun√ß√£o dispon√≠vel: reativarTeste('ID')")
  } else {
    console.log("‚ÑπÔ∏è Nenhum agendamento recusado encontrado")

    // Criar um agendamento recusado para teste
    console.log("\nüîß Criando agendamento recusado para teste...")

    const agendamentoTeste = {
      id: `teste_recusado_${Date.now()}`,
      mentorEmail: "mentor@email.com",
      alunoId: "2",
      alunoNome: "Maria Aluna Santos",
      alunoEmail: "aluno@email.com",
      data: new Date().toISOString(),
      horario: "14:00",
      assunto: "Teste de reativa√ß√£o",
      status: "recusado",
      motivoRecusa: "Teste para debug",
      createdAt: new Date().toISOString(),
    }

    agendamentos.push(agendamentoTeste)
    localStorage.setItem("agendamentos", JSON.stringify(agendamentos))

    console.log("‚úÖ Agendamento de teste criado:", agendamentoTeste.id)
    console.log("üîÑ Execute o script novamente para testar")
  }
} else {
  console.log("‚ùå Nenhum dado encontrado no localStorage")

  // Criar dados b√°sicos
  const dadosBasicos = [
    {
      id: `teste_recusado_${Date.now()}`,
      mentorEmail: "mentor@email.com",
      alunoId: "2",
      alunoNome: "Maria Aluna Santos",
      alunoEmail: "aluno@email.com",
      data: new Date().toISOString(),
      horario: "14:00",
      assunto: "Teste de reativa√ß√£o",
      status: "recusado",
      motivoRecusa: "Criado para teste",
      createdAt: new Date().toISOString(),
    },
  ]

  localStorage.setItem("agendamentos", JSON.stringify(dadosBasicos))
  console.log("‚úÖ Dados b√°sicos criados")
  console.log("üîÑ Execute o script novamente")
}

console.log("\n" + "=".repeat(60))
console.log("‚úÖ DEBUG COMPLETO FINALIZADO")
